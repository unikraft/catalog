name: library/bun:1.1

on:
  schedule:
  - cron: '0 0 * * *' # Everyday at 12AM

  push:
    branches: [main]
    paths:
    - 'library/bun/1.1/**'
    - '.github/workflows/library-bun1.1.yaml'
    - '!library/bun/1.1/README.md'

  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths:
    - 'library/bun/1.1/**'
    - '.github/workflows/library-bun1.1.yaml'
    - '!library/bun/1.1/README.md'

# Automatically cancel in-progress actions on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request_target' && github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - plat: qemu
          arch: x86_64
        - plat: fc
          arch: x86_64

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Debug Kraftfile presence
      run: |
        echo "Checking for Kraftfile in workspace"
        find . -type f | grep -i kraftfile || echo "Kraftfile not found"
        ls -la library/bun/1.1 || echo "Directory missing"
        cat library/bun/1.1/Kraftfile || echo "Kraftfile content missing"

    - name: Build bun1.1
      uses: unikraft/kraftkit@staging
      with:
        loglevel: debug
        workdir: library/bun/1.1
        runtimedir: /github/workspace/.kraftkit
        plat: ${{ matrix.plat }}
        arch: ${{ matrix.arch }}
        push: false
        output: oci://index.unikraft.io/unikraft.org/bun:1.1

    - name: Archive OCI digests
      uses: actions/upload-artifact@v4
      with:
        name: oci-digests-${{ matrix.arch }}-${{ matrix.plat }}
        path: ${{ github.workspace }}/.kraftkit/oci/digests
        if-no-files-found: error

  push:
    if: ${{ github.event_name == 'push' || github.event_name == 'schedule' }}
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check OCI credentials
      id: check_creds
      run: |
        if [ -z "${{ secrets.REG_USERNAME }}" ] || [ -z "${{ secrets.REG_TOKEN }}" ]; then
          echo "OCI credentials not set. Skipping push."
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "OCI credentials found."
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Login to OCI registry
      if: steps.check_creds.outputs.skip == 'false'
      uses: docker/login-action@v3
      with:
        registry: index.unikraft.io
        username: ${{ secrets.REG_USERNAME }}
        password: ${{ secrets.REG_TOKEN }}

    - name: Retrieve, merge and push OCI digests
      if: steps.check_creds.outputs.skip == 'false'
      uses: ./.github/actions/merge-oci-digests
      with:
        name: index.unikraft.io/unikraft.org/bun:1.1
        push: true

  run-remote:
    name: Test Bun 1.1 (Remote OCI)
    needs: [build, push]
    if: ${{ always() && !cancelled() && needs.push.result == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Login to OCI registry
        uses: docker/login-action@v3
        with:
          registry: index.unikraft.io
          username: ${{ secrets.REG_USERNAME }}
          password: ${{ secrets.REG_TOKEN }}

      - name: Pull, run, validate and cleanup remote container
        run: |
          set -euo pipefail
          IMAGE=index.unikraft.io/unikraft.org/bun:1.1

          echo "Pulling remote OCI image..."
          docker pull "$IMAGE"

          echo "Starting remote unikernel container..."
          CONTAINER_ID=$(docker run --rm -d -p 3000:3000 "$IMAGE")

          echo "Waiting for port 3000"
          TIMEOUT=10
          START_TS=$(date +%s)
          until nc -z localhost 3000; do
            if [ $(( $(date +%s) - START_TS )) -ge $TIMEOUT ]; then
              echo "ERROR: port 3000 did not open within ${TIMEOUT}s" >&2
              docker logs "$CONTAINER_ID" >&2 || true
              docker stop "$CONTAINER_ID" || true
              exit 1
            fi
            sleep 1
          done
          echo "Port 3000 is now accepting connections"

          echo "Validating HTTP response"
          EXPECTED="Hello, World!"
          RESPONSE=$(curl -fs http://localhost:3000/)
          if [ "$RESPONSE" != "$EXPECTED" ]; then
            echo "ERROR: expected '$EXPECTED' but got '$RESPONSE'" >&2
            docker logs "$CONTAINER_ID" >&2 || true
            docker stop "$CONTAINER_ID" || true
            exit 1
          fi
          echo "Response is correct: '$RESPONSE'"

          echo "Stopping container"
          docker stop "$CONTAINER_ID" || true

  run-local:
    name: Test Bun 1.1 (Local build)
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup kraftkit
        uses: unikraft/kraftkit@staging
        with:
          loglevel: debug
          runtimedir: /github/workspace/.kraftkit

      - name: Verify and build locally
        run: |
          set -euo pipefail
          echo "Verifying contents of library/bun/1.1"
          ls -la library/bun/1.1
          file library/bun/1.1/Kraftfile || echo "Kraftfile NOT FOUND"
          echo "---"
          head -n 10 library/bun/1.1/Kraftfile || true

          cd library/bun/1.1

          echo "Build unikernel locally"
          sudo kraft build --no-cache --no-update --plat qemu --arch x86_64

          echo "Run local unikernel"
          sudo kraft run --rm -M 512M -p 3000:3000 --plat qemu --arch x86_64 . &
          PID=$!
          sleep 5

          echo "Wait for port 3000"
          TIMEOUT=10
          START_TS=$(date +%s)
          until nc -z localhost 3000; do
            if [ $(( $(date +%s) - START_TS )) -ge $TIMEOUT ]; then
              echo "ERROR: port 3000 did not open within ${TIMEOUT}s" >&2
              sudo kill "$PID" || true
              exit 1
            fi
            sleep 1
          done
          echo "Port 3000 is now accepting connections"

          echo "Validate HTTP response"
          EXPECTED="Hello, World!"
          RESPONSE=$(curl -fs http://localhost:3000/)
          if [ "$RESPONSE" != "$EXPECTED" ]; then
            echo "ERROR: expected '$EXPECTED' but got '$RESPONSE'" >&2
            sudo kill "$PID" || true
            exit 1
          fi
          echo "Response is correct: '$RESPONSE'"

          echo "Cleanup unikernel"
          sudo kill "$PID" || true
