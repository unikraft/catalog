name: library/redis:7.2

on:
  repository_dispatch:
    types: [core_merge, elfloader_merge, libelf_merge, lwip_merge]

  workflow_dispatch:

  schedule:
  - cron: '0 0 * * *' # Everyday at 12AM

  push:
    branches: [main]
    paths:
    - 'library/redis/7.2/**'
    - '.github/workflows/library-redis7.2.yaml'

  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths:
    - 'library/redis/7.2/**'
    - '.github/workflows/library-redis7.2.yaml'

# Automatically cancel in-progress actions on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request_target' && github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - plat: qemu
          arch: x86_64
        - plat: fc
          arch: x86_64

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build redis7.2
      uses: unikraft/kraftkit@staging
      with:
        loglevel: debug
        workdir: library/redis/7.2
        runtimedir: /github/workspace/.kraftkit
        plat: ${{ matrix.plat }}
        arch: ${{ matrix.arch }}
        push: false
        output: oci://index.unikraft.io/unikraft.org/redis:7.2

    - name: Archive OCI digests
      uses: actions/upload-artifact@v4
      with:
        name: oci-digests-${{ matrix.arch }}-${{ matrix.plat }}
        path: ${{ github.workspace }}/.kraftkit/oci/digests
        if-no-files-found: error

  push:
    if: ${{ github.event_name == 'push' || github.event_name == 'schedule' }}
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Login to OCI registry
      uses: docker/login-action@v3
      with:
        registry: index.unikraft.io
        username: ${{ secrets.REG_USERNAME }}
        password: ${{ secrets.REG_TOKEN }}

    - name: Retrieve, merge and push OCI digests
      uses: ./.github/actions/merge-oci-digests
      with:
        name: index.unikraft.io/unikraft.org/redis:7.2
        push: true

  run-remote:
    name: Test Redis 7.2 (Remote OCI)
    needs: [build, push]
    runs-on: ubuntu-latest

    steps:
      - name: Login to OCI registry
        uses: docker/login-action@v3
        with:
          registry: index.unikraft.io
          username: ${{ secrets.REG_USERNAME }}
          password: ${{ secrets.REG_TOKEN }}

      - name: Pull, run, ping, and cleanup remote unikernel
        run: |
          set -euo pipefail

          echo "Pull and start Redis unikernel"
          IMAGE=index.unikraft.io/unikraft.org/redis:7.2
          docker pull "$IMAGE"
          CONTAINER_ID=$(docker run --rm -d -p 6379:6379 "$IMAGE")

          echo "Install redis-cli"
          sudo apt-get update -y && sudo apt-get install -y redis-tools

          echo "Wait for port 6379"
          TIMEOUT=10
          START_TS=$(date +%s)
          until nc -z localhost 6379; do
            if [ $(( $(date +%s) - START_TS )) -ge $TIMEOUT ]; then
              echo "ERROR: Redis port 6379 did not open within ${TIMEOUT}s" >&2
              docker logs "$CONTAINER_ID" >&2 || true
              docker stop "$CONTAINER_ID" || true
              exit 1
            fi
            sleep 1
          done

          echo "Send PING to Redis"
          if ! redis-cli -h 127.0.0.1 -p 6379 ping | grep -q "PONG"; then
            echo "ERROR: Redis did not respond to PING" >&2
            docker logs "$CONTAINER_ID" >&2 || true
            docker stop "$CONTAINER_ID" || true
            exit 1
          fi
          echo "Redis 7.2 unikernel responded to PING with PONG"

          echo "Cleanup container"
          docker stop "$CONTAINER_ID" || true
  
  run-local:
    name: Test Redis 7.2 (Local build)
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install kraft CLI and redis-tools
        run: |
          echo "deb [trusted=yes] https://deb.pkg.kraftkit.sh/ /" | sudo tee /etc/apt/sources.list.d/kraftkit.list
          sudo apt-get update
          sudo apt-get install -y kraftkit redis-tools

      - name: Build, run, ping, and cleanup unikernel
        run: |
          set -euo pipefail
          sudo chmod 666 /dev/kvm
          cd library/redis/7.2

          echo "Build Redis 7.2 unikernel"
          kraft build --no-cache --no-update --plat qemu --arch x86_64

          echo "Run Redis 7.2 unikernel"
          kraft run --rm -M 256M -p 6379:6379 --plat qemu --arch x86_64 . &
          PID=$!
          sleep 5

          echo "Wait for port 6379"
          TIMEOUT=10
          START_TS=$(date +%s)
          until nc -z localhost 6379; do
            if [ $(( $(date +%s) - START_TS )) -ge $TIMEOUT ]; then
              echo "ERROR: Redis port 6379 did not open within ${TIMEOUT}s" >&2
              sudo kill "$PID" || true
              exit 1
            fi
            sleep 1
          done
          echo "Redis is now accepting connections on port 6379"

          echo "Validate Redis PING"
          if ! redis-cli -h 127.0.0.1 -p 6379 ping | grep -q "PONG"; then
            echo "ERROR: Redis did not respond to PING" >&2
            sudo kill "$PID" || true
            exit 1
          fi
          echo "Redis 7.2 responded correctly to PING"

          echo "Cleanup Redis 7.2 unikernel"
          sudo kill "$PID" || true
